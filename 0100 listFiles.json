[
 {
  "desc": "run all analysis scripts in order of their numbering\r\n\noptional parameter is the prefix of the first script to execute\r\n\n(a script always has to start with 4 digits and end in .js)",
  "key": "0000",
  "name": "runAllScripts",
  "file": "0000 runAllScripts.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": []
 },
 {
  "desc": "run all analysis scripts in order of their numbering\r\n\nstarting with the given script (or prefix thereof)",
  "key": "0010",
  "name": "runFromScript",
  "file": "0010 runFromScript.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": []
 },
 {
  "desc": "run the given analysis scripts in order of their numbering\r\n\nscripts are given by just their number",
  "key": "0020",
  "name": "runScripts",
  "file": "0020 runScripts.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": []
 },
 {
  "desc": "create a list of all files and their descriptions\r\n\noutput:\r\n- \"listFiles\" ... information about the scripts",
  "key": "0100",
  "name": "listFiles",
  "file": "0100 listFiles.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "listFiles"
  ],
  "exportHTML": []
 },
 {
  "desc": "Run all the SPARQL Queries present in /data against the respective ontologies\r\nand store the resulting data in /res\r\n\noutput:\r\n- one file per type and ontology in separate folders",
  "key": "0510",
  "name": "extraction",
  "file": "0510 extraction.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": []
 },
 {
  "desc": "check the results of extract data\r\n- do all necessary result files exist?\r\n- do the contents of the files conform to the standard definition?\r\n\noutput:\r\n- none",
  "key": "0520",
  "name": "check - validate extraction",
  "file": "0520 check - validate extraction.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "check - validate extraction"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether units are listed twice in prefixUnit\r\n\noutput:\r\n- \"check - prefixUnit duplicates\" ... list of duplicates per ontology",
  "key": "1000",
  "name": "check - prefixUnit duplicates",
  "file": "1000 check - prefixUnit duplicates.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "prefixUnit"
  ],
  "exportResult": [
   "check - prefixUnit duplicates"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether all conversions included have either an offset or a factor\r\n\noutput:\r\n- \"completeness - conversionValues\" ... list of conversions per ontology with neither offset nor factor",
  "key": "1400",
  "name": "completeness - conversionValues",
  "file": "1400 completeness - conversionValues.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "conversion"
  ],
  "exportResult": [
   "completeness - conversionValues"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether all referenced units and dimensions of dimensionUnit exist in the respective datasets\r\n\noutput:\r\n\"completeness - dimensionUnit\" ... list per ontology of missing units and dimensions",
  "key": "1500",
  "name": "completeness - dimensionUnit",
  "file": "1500 completeness - dimensionUnit.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "unit",
   "dimension",
   "dimensionUnit"
  ],
  "exportResult": [
   "completeness - dimensionUnit"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether all referenced units and prefixes of prefixUnit exist in the respective datasets\r\n\noutput:\r\n\"completeness - prefixUnit\" ... list per ontology of missing units and prefixes",
  "key": "1501",
  "name": "completeness - prefixUnit",
  "file": "1501 completeness - prefixUnit.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "unit",
   "prefix",
   "prefixUnit"
  ],
  "exportResult": [
   "completeness - prefixUnit"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether all referenced units of conversion exist in the unit dataset\r\n\noutput:\r\n\"completeness - conversionUnits\" ... list per ontology of missing units",
  "key": "1502",
  "name": "completeness - conversionUnits",
  "file": "1502 completeness - conversionUnits.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "unit",
   "conversion"
  ],
  "exportResult": [
   "completeness - conversionUnits"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether all referenced units and application fields of appFieldUnit exist in the respective datasets\r\n\noutput:\r\n\"completeness - appFieldUnit\" ... list per ontology of missing units and application fields",
  "key": "1503",
  "name": "completeness - appFieldUnit",
  "file": "1503 completeness - appFieldUnit.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "unit",
   "appField",
   "appFieldUnit"
  ],
  "exportResult": [
   "completeness - appFieldUnit"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether all referenced quantity kinds and dimensions of quantKindDim exist in the respective datasets\r\n\noutput:\r\n\"completeness - quantKindDim\" ... list per ontology of missing dimensions and quantity kinds",
  "key": "1504",
  "name": "completeness - quantKindDim",
  "file": "1504 completeness - quantKindDim.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "quantKind",
   "dimension",
   "quantKindDim"
  ],
  "exportResult": [
   "completeness - quantKindDim"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether all referenced units and quantity kinds of quantKindUnit exist in the respective datasets\r\n\noutput:\r\n\"completeness - quantKindUnit\" ... list per ontology of missing units and quantity kinds",
  "key": "1505",
  "name": "completeness - quantKindUnit",
  "file": "1505 completeness - quantKindUnit.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "quantKind",
   "unit",
   "quantKindUnit"
  ],
  "exportResult": [
   "completeness - quantKindUnit"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether all referenced units of systemUnit exist in the unit dataset",
  "key": "1506",
  "name": "completeness - systemUnit",
  "file": "1506 completeness - systemUnit.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "unit",
   "system",
   "systemUnit"
  ],
  "exportResult": [
   "completeness - systemUnit"
  ],
  "exportHTML": []
 },
 {
  "desc": "list all objects, which have multiple labels\r\n\noutput\r\n- \"check - multiple labels\" ... list per ontology of object with multiple labels",
  "key": "1600",
  "name": "check - multiple labels",
  "file": "1600 check - multiple labels.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "check - multiple labels"
  ],
  "exportHTML": []
 },
 {
  "desc": "find exotic characters\r\ncurrently tested:\r\n- non standard whitespace characters\r\n\noutput:\r\n- \"check - exotic characters\" ... list per ontology, type and exotic character of found occurrences",
  "key": "1650",
  "name": "check - exotic characters",
  "file": "1650 check - exotic characters.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "check - exotic characters"
  ],
  "exportHTML": []
 },
 {
  "desc": "collect data about the usage of keywords like \"per\" and \"reciprocal\"\r\n\noutput:\r\n\"check - keyword usage\" ... list per ontology and keyword of units, whose label contains any of the given keywords",
  "key": "1670",
  "name": "check - keyword usage",
  "file": "1670 check - keyword usage.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "unit"
  ],
  "exportResult": [
   "check - keyword usage"
  ],
  "exportHTML": []
 },
 {
  "desc": "convert the extracted list of dimension to SemDimension objects\r\n\noutput:\r\n- \"dimension\" ... list of all converted dimensions\r\n- \"dimension_perOnto\" ... list of converted dimensions per ontology",
  "key": "2000",
  "name": "dimension",
  "file": "2000 semObject - dimensions.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "dimension"
  ],
  "exportResult": [
   "dimension",
   "dimension_perOnto"
  ],
  "exportHTML": []
 },
 {
  "desc": "convert the extracted list of units to SemUnit objects\r\n\noutput:\r\n- \"unit\" ... list of all converted units\r\n- \"unit_perOnto\" ... list of converted units per ontology",
  "key": "2100",
  "name": "unit",
  "file": "2100 semObject - units.js",
  "loadedResults": [],
  "loadedPredefined": [
   "2100 systemModifier.csv"
  ],
  "loadedData": [
   "unit",
   "prefixUnit"
  ],
  "exportResult": [
   "unit",
   "unit_perOnto"
  ],
  "exportHTML": []
 },
 {
  "desc": "computes the transitive closure for conversions\r\ndone for each ontology separately\r\n\noutput:\r\n- \"conversion\" ... list of all conversions (extracted and computed)\r\n- \"conversion_perOnto\" ... list per ontology of conversions (extracted and computed)",
  "key": "2200",
  "name": "conversion",
  "file": "2200 calculation - conversion transitive closure.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "conversion"
  ],
  "exportResult": [
   "conversion_perOnto",
   "conversion"
  ],
  "exportHTML": []
 },
 {
  "desc": "convert the extracted list of application fields to SemObjects objects\r\n\noutput:\r\n- \"appField\" ... list of all converted application fields\r\n- \"appField_perOnto\" ... list of converted application fields per ontology",
  "key": "2300",
  "name": "appField",
  "file": "2300 semObject - appFields.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "appField"
  ],
  "exportResult": [
   "appField",
   "appField_perOnto"
  ],
  "exportHTML": []
 },
 {
  "desc": "convert the extracted list of quantity kinds to SemObject objects\r\n\noutput:\r\n- \"quantKind\" ... list of all converted quantity kinds\r\n- \"quantKind_perOnto\" ... list of converted quantity kinds per ontology",
  "key": "2400",
  "name": "quantKind",
  "file": "2400 semObject - quantKinds.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "quantKind"
  ],
  "exportResult": [
   "quantKind",
   "quantKind_perOnto"
  ],
  "exportHTML": []
 },
 {
  "desc": "convert the extracted list of system of units to SemObjects objects\r\n\noutput:\r\n- \"system\" ... list of all converted systems of units\r\n- \"system_perOnto\" ... list of converted systems of units per ontology",
  "key": "2500",
  "name": "system",
  "file": "2500 semObject - systems.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "system"
  ],
  "exportResult": [
   "system",
   "system_perOnto"
  ],
  "exportHTML": []
 },
 {
  "desc": "convert the extracted list of prefixes to SemObjects objects\r\n\noutput:\r\n- \"prefix\" ... list of all converted prefixes\r\n- \"prefix_perOnto\" ... list of converted prefixes per ontology",
  "key": "2600",
  "name": "prefix",
  "file": "2600 semObject - prefixes.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "prefix"
  ],
  "exportResult": [
   "prefix",
   "prefix_perOnto"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether there are duplicate dimension vectors within one ontology\r\n\noutput:\r\n\"check - duplicated dimVector\" ... list of dimensions with identical dimension vectors",
  "key": "3000",
  "name": "check - duplicated dimVector",
  "file": "3000 check - duplicated dimVector.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "check - duplicated dimVector"
  ],
  "exportHTML": []
 },
 {
  "desc": "find units, that are determined as prefixed by a heuristic, but not by ontology\r\n\noutput:\r\n- \"heuristic - prefixed units\" ... list per ontology of units not recognized as prefixed\r\n- \"unit_prefixHeuristic\" ... list of SemUnit with heuristic information included",
  "key": "3100",
  "name": "heuristic - prefixed units",
  "file": "3100 heuristic - prefixed units.js",
  "loadedResults": [
   "unit",
   "prefix"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "heuristic - prefixed units",
   "'unit_prefixHeuristic'"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, whether there are duplicate/redundant conversions given within a single ontology\r\n\noutput:\r\n- \"check - redundant conversions\" ... list per ontology of redundant conversions",
  "key": "3200",
  "name": "check - redundant conversions",
  "file": "3200 check - redundant conversions.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "conversion"
  ],
  "exportResult": [
   "check - redundant conversions"
  ],
  "exportHTML": []
 },
 {
  "desc": "check, if there are contradictions in an ontology between conversion and prefix values\r\n\noutput:\r\n- \"check - conversion prefix factor comparison\" ... list per ontology of contradictions",
  "key": "3300",
  "name": "check - conversion prefix factor comparison",
  "file": "3300 check - conversion prefix factor comparison.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "conversion",
   "prefix",
   "prefixUnit"
  ],
  "exportResult": [
   "check - conversion prefix factor comparison"
  ],
  "exportHTML": []
 },
 {
  "desc": "calculate the coverage of an ontology wrt to the different connection relations\r\n== number of distinct URIs of a given type in a relation\r\n\nexample: \"how many units are attached to a system of units?\"\r\n         or\r\n         \"how many quantity kinds have at least one unit?\"\r\n\noutput:\r\n- \"statistic - relation coverage\" ... counts how many instances of the baseType have at least one entry in the relation\r\n- \"statistic - relation coverage missing\"   ... URIs of the baseType with no entry in the relation",
  "key": "3700",
  "name": "statistic - relation coverage",
  "file": "3700 statistic - relation coverage.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "statistic - relation coverage",
   "statistic - relation coverage + ' missing'"
  ],
  "exportHTML": []
 },
 {
  "desc": "map the dimensions of the ontologies to SynSets\r\n\noutput\r\n- \"mapDimension\" ... list of SynSets",
  "key": "4000",
  "name": "mapDimension",
  "file": "4000 mapping - dimensions.js",
  "loadedResults": [
   "dimension"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "mapDimension"
  ],
  "exportHTML": []
 },
 {
  "desc": "map the units of the ontologies to SynSets\r\n\noutput\r\n- \"mapUnit\" ... list of SynSets",
  "key": "4100",
  "name": "mapUnit",
  "file": "4100 mapping - units.js",
  "loadedResults": [
   "unit_prefixHeuristic"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "mapUnit"
  ],
  "exportHTML": []
 },
 {
  "desc": "map the conversions according to the unit SynSets\r\nomitted mappings:\r\n- less than two conversions included\r\n- consisting of just computed conversions\r\n\noutput:\r\n- \"mapConversion\" ... list of mapped conversions",
  "key": "4200",
  "name": "mapConversion",
  "file": "4200 mapping - conversions.js",
  "loadedResults": [
   "mapUnit",
   "conversion"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "mapConversion"
  ],
  "exportHTML": []
 },
 {
  "desc": "map the application fields of the ontologies to SynSets\r\n\noutput\r\n- \"mapAppField\" ... list of SynSets",
  "key": "4300",
  "name": "mapAppField",
  "file": "4300 mapping - appField.js",
  "loadedResults": [
   "appField"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "mapAppField"
  ],
  "exportHTML": []
 },
 {
  "desc": "map the quantity kinds of the ontologies to SynSets\r\n\noutput\r\n- \"mapQuantKind\" ... list of SynSets",
  "key": "4400",
  "name": "mapQuantKind",
  "file": "4400 mapping - quantKinds.js",
  "loadedResults": [
   "quantKind"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "mapQuantKind"
  ],
  "exportHTML": []
 },
 {
  "desc": "map the systems of units of the ontologies to SynSets\r\n\noutput\r\n- \"mapSystem\" ... list of SynSets",
  "key": "4500",
  "name": "mapSystem",
  "file": "4500 mapping - system.js",
  "loadedResults": [
   "system"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "mapSystem"
  ],
  "exportHTML": []
 },
 {
  "desc": "map the prefixes of the ontologies to SynSets\r\n\noutput\r\n- \"mapPrefix\" ... list of SynSets",
  "key": "4600",
  "name": "mapPrefix",
  "file": "4600 mapping - prefix.js",
  "loadedResults": [
   "prefix"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "mapPrefix"
  ],
  "exportHTML": []
 },
 {
  "desc": "check the mapping of dimensions for errors:\r\n- different dimension vectors within one synonym set\r\n\noutput:\r\n- \"check - dimensionVector\" ... list of contradicting dimension vectors",
  "key": "5000",
  "name": "check - dimensionVector",
  "file": "5000 check - dimensionVector.js",
  "loadedResults": [
   "mapDimension"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "check - dimensionVector"
  ],
  "exportHTML": []
 },
 {
  "desc": "try to find missed dimension mappings by comparing the dimension vectors of the SynSets\r\n\noutput:\r\n- \"check - missed mappings dimension\" ... SynSets of dimensions, which share the same dimension vector",
  "key": "5100",
  "name": "check - missed mappings dimension",
  "file": "5100 check - missed mappings dimension.js",
  "loadedResults": [
   "mapDimension"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "check - missed mappings dimension"
  ],
  "exportHTML": []
 },
 {
  "desc": "find \"important\" missing units in the ontologies\r\n\n\"important\" is defined as \"the unit is present in more than half the listed ontologies\"\r\n\noutput:\r\n- \"check - missed units\" ... list per ontology of missing units",
  "key": "5130",
  "name": "check - missed units",
  "file": "5130 check - missed units.js",
  "loadedResults": [
   "mapUnit"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "check - missed units"
  ],
  "exportHTML": []
 },
 {
  "desc": "check the mapped lists for entries,\r\nthat include more than one object of the same ontology\r\n\noutput:\r\n- \"check - mapped duplicates\" ... list per ontology of objects mapped to one another",
  "key": "5150",
  "name": "check - mapped duplicates",
  "file": "5150 check - mapped duplicates.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [
   "sameAs"
  ],
  "exportResult": [
   "check - mapped duplicates_ + mapType"
  ],
  "exportHTML": []
 },
 {
  "desc": "check the mapped conversions for consistency across ontologies\r\neliminates conversions, which seem to be rounded values of one another\r\n\noutput:\r\n- \"check - conversion contradictions\" ... list of contradicting conversions\r\n- \"check - conversion contradictions rounded\" ... list of contradicting conversions taking rounding into account",
  "key": "5200",
  "name": "check - conversion contradictions",
  "file": "5200 check - conversion contradictions.js",
  "loadedResults": [
   "mapUnit",
   "mapConversion"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "check - conversion contradictions",
   "check - conversion contradictions + ' rounded'"
  ],
  "exportHTML": []
 },
 {
  "desc": "cross validate unit mapping and dimension mapping using the dimensionUnit association\r\n\noutput:\r\n- \"check - dimension per unit after mapping\" ... list of dimension-unit-pairs, that are ambiguous wrt. to dimensionUnit\r\n- \"check - dimension per unit after mapping error\" ... ambiguous relations in dimensionUnit, if any",
  "key": "5500",
  "name": "check - dimension per unit after mapping",
  "file": "5500 check - dimension per unit after mapping.js",
  "loadedResults": [
   "mapDimension",
   "mapUnit"
  ],
  "loadedPredefined": [],
  "loadedData": [
   "dimensionUnit"
  ],
  "exportResult": [
   "check - dimension per unit after mapping + ' error'",
   "check - dimension per unit after mapping"
  ],
  "exportHTML": []
 },
 {
  "desc": "check for unit that are imprecise, e.g. \"gallon\" vs \"gallon (us)\" and \"gallon (uk)\"\r\n\noutput:\r\n- \"check - vague designation\" ... list of units with vague designation",
  "key": "5550",
  "name": "check - vague designation",
  "file": "5550 check - vague designation.js",
  "loadedResults": [
   "mapUnit"
  ],
  "loadedPredefined": [
   "2100 systemModifier.csv"
  ],
  "loadedData": [],
  "exportResult": [
   "check - vague designation"
  ],
  "exportHTML": []
 },
 {
  "desc": "Compare the factors associated with the prefixes for mismatches\r\n\noutput:\r\n- \"check - prefix factors\" ... contradicting prefixes",
  "key": "5600",
  "name": "check - prefix factors",
  "file": "5600 check - prefix factors.js",
  "loadedResults": [
   "mapPrefix"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "check - prefix factors"
  ],
  "exportHTML": []
 },
 {
  "desc": "count the entries per ontology result file\r\n\noutput:\r\n- \"statistic - individuals per ontology after extraction\" ... counts of objects per ontology and type",
  "key": "6000",
  "name": "statistic - individuals per ontology after extraction",
  "file": "6000 statistic - individuals per ontology after extraction.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "statistic - individuals per ontology after extraction"
  ],
  "exportHTML": []
 },
 {
  "desc": "count prefixed units per ontology\r\nsynonyms in one ontology will be counted repeatedly\r\n\ncalculated values:\r\n- unit_noprefix_total      : count of units without prefix (not stated by the ontology, other ontologies or heuristic)\r\n- unit_prefix_ontology     : count of units with prefix (stated by the ontology)\r\n- unit_prefix_heuristic    : count of units with prefix (not stated by the ontology, but stated by heuristic)\r\n- unit_prefix_unrecognized : count of units with prefix (not stated by the ontology or heuristic, but stated by other ontology)\r\n- unit_prefix_total        : count of units with prefix (stated by the ontology, other ontologies or heuristic)\r\n\noutput:\r\n- \"statistic - prefixed units after extraction\" ... calculated values per ontology",
  "key": "6010",
  "name": "statistic - prefixed units after extraction",
  "file": "6010 statistic - prefixed units after extraction.js",
  "loadedResults": [
   "mapUnit"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "statistic - prefixed units after extraction"
  ],
  "exportHTML": []
 },
 {
  "desc": "count the entries per SynSet type\r\n\noutput:\r\n- \"statistic - individuals per ontology after mapping\" ... counts of objects per ontology wrt to SynSets",
  "key": "6020",
  "name": "statistic - individuals per ontology after mapping",
  "file": "6020 statistic - individuals per ontology after mapping.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "statistic - individuals per ontology after mapping"
  ],
  "exportHTML": []
 },
 {
  "desc": "count the entries per SynSet type for special cases:\r\n* non-prefixed units (not stated by the ontology, other ontologies or heuristic)\r\n\nsynonyms in one ontology will be counted collectively\r\n\noutput:\r\n- \"statistic - prefixed units after mapping\" ... counts per ontology",
  "key": "6021",
  "name": "statistic - prefixed units after mapping",
  "file": "6021 statistic - prefixed units after mapping.js",
  "loadedResults": [
   "mapUnit"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "statistic - prefixed units after mapping"
  ],
  "exportHTML": []
 },
 {
  "desc": "count per type: plain values as extracted and mapped SynSets\r\n\noutput:\r\n- \"statistic - individual reduction by mapping\" ... counts per type",
  "key": "6050",
  "name": "statistic - individual reduction by mapping",
  "file": "6050 statistic - individual reduction by mapping.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "statistic - individual reduction by mapping"
  ],
  "exportHTML": []
 },
 {
  "desc": "Count the overlap between ontologies in the mapped units\r\n\noutput:\r\n- \"statistic - unit overlap - shared noPrefix\" ... shared units without prefix among x ontologies\r\n- \"statistic - unit overlap - shared total\" ... shared units among x ontologies\r\n- \"statistic - unit overlap - sharedCounts noPrefix\" ... number of shared units without prefix among x ontologies\r\n- \"statistic - unit overlap - sharedCounts total\" ... number of shared units among x ontologies\r\n- \"statistic - unit overlap - overlap noPrefix\" ... number of shared units without prefix between any two ontologies\r\n- \"statistic - unit overlap - overlap total\" ... number of shared units between any two ontologies",
  "key": "6100",
  "name": "statistic - unit overlap",
  "file": "6100 statistic - unit overlap.js",
  "loadedResults": [
   "mapUnit"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [
   "statistic - unit overlap + ' - shared noPrefix'",
   "statistic - unit overlap + ' - shared total'",
   "statistic - unit overlap + ' - sharedCounts noPrefix'",
   "statistic - unit overlap + ' - sharedCounts total'",
   "statistic - unit overlap + ' - overlap noPrefix'",
   "statistic - unit overlap + ' - overlap total'"
  ],
  "exportHTML": []
 },
 {
  "desc": "Count the number of sameAs entries per known namespace\r\n\noutput:\r\n- \"statistic - sameAs scope\" ... counts per namespace",
  "key": "6900",
  "name": "statistic - sameAs scope",
  "file": "6900 statistic - sameAs scope.js",
  "loadedResults": [],
  "loadedPredefined": [
   "6900 namespaces.csv"
  ],
  "loadedData": [
   "sameAs"
  ],
  "exportResult": [
   "statistic - sameAs scope"
  ],
  "exportHTML": []
 },
 {
  "desc": "Create HTML output for contents of the ontologies (per type) before mapping to SynSets\r\n\noutput:\r\n- \"statistic - individuals per ontology after extraction\" ... table of extracted individuals per ontology",
  "key": "9000",
  "name": "statistic - individuals per ontology after extraction",
  "file": "9000 statistic - individuals per ontology after extraction.js",
  "loadedResults": [
   "statistic - individuals per ontology after extraction",
   "statistic - prefixed units after extraction"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "statistic - individuals per ontology after extraction"
  ]
 },
 {
  "desc": "Create HTML output for contents of the ontologies (per type) after mapping to SynSets\r\n\noutput:\r\n- \"statistic - individuals per ontology after mapping\" ... table of individuals per ontology after mapping",
  "key": "9010",
  "name": "statistic - individuals per ontology after mapping",
  "file": "9010 statistic - individuals per ontology after mapping.js",
  "loadedResults": [
   "statistic - individuals per ontology after mapping",
   "statistic - prefixed units after mapping"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "statistic - individuals per ontology after mapping"
  ]
 },
 {
  "desc": "Create HTML output for the results of property distribution in SPARQL files\r\n\noutput:\r\n- \"check - extracted properties\" ... table for property distribution per ontology and type",
  "key": "9050",
  "name": "check - extracted properties",
  "file": "9050 check - extracted properties.js",
  "loadedResults": [
   "check - validate extraction"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - extracted properties"
  ]
 },
 {
  "desc": "Create HTML output for coverage of baseTypes in the relations\r\n\nuses instance counts (not SynSet counts!) as reference\r\n\noutput:\r\n- \"check - individuals used in relations\" ... dsitribution of objects per relation\r\n- \"check - individuals used in relations missing\" ... list per ontology of objects missing in a relation",
  "key": "9060",
  "name": "check - individuals used in relations",
  "file": "9060 check - relation coverage.js",
  "loadedResults": [
   "statistic - relation coverage",
   "statistic - individuals per ontology after extraction",
   "statistic - relation coverage missing"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - individuals used in relations",
   "check - individuals used in relations + ' missing'"
  ]
 },
 {
  "desc": "Create HTML outputs for mapped SynSets\r\n\noutput:\r\n- (various files) ... list of SynSets per type",
  "key": "9100",
  "name": "check - mappings",
  "file": "9100 check - mapping.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - mappings + ' - ' + type"
  ]
 },
 {
  "desc": "Create HTML outputs for mapped SynSets\r\n\ntransform labels; makes for easier spotting of missed mappings\r\ncan not be automated, because of \"gram per litre\" and \"litre per gram\"\r\n\n\noutput:\r\n- (various files) ... list of SynSets per type labels sorted alphabetically",
  "key": "9101",
  "name": "check - mapping sorted words in labels",
  "file": "9101 check - mapping sorted words in labels.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - mapping sorted words in labels + ' - ' + type"
  ]
 },
 {
  "desc": "Create HTML output for unit, which possibly lack a prefix annotation\r\nlack is determined by heuristic\r\n\noutput:\r\n- \"check - missed prefix relation\" ... list per ontology of units with possibly lacking prefix annotation",
  "key": "9110",
  "name": "check - missed prefix relation",
  "file": "9110 check - missed prefix relation.js",
  "loadedResults": [
   "unit",
   "heuristic - prefixed units"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - missed prefix relation"
  ]
 },
 {
  "desc": "Create HTML output for important units missing in an ontology\r\n\noutput:\r\n- \"check - missed units\" ... list per ontology of possibly missing units",
  "key": "9130",
  "name": "check - missed units",
  "file": "9130 check - missed units.js",
  "loadedResults": [
   "unit",
   "check - missed units"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - missed units"
  ]
 },
 {
  "desc": "Create HTML output for duplicate mappings,\r\nthat is SynSets containing more than one individual from a single ontology\r\n\noutput:\r\n- \"check - mapped duplicates\" ... list of possible duplicates",
  "key": "9150",
  "name": "check - mapped duplicates",
  "file": "9150 check - mapped duplicates.js",
  "loadedResults": [],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - mapped duplicates"
  ]
 },
 {
  "desc": "Create HTML output for used redundant conversions in a single ontology\r\n\noutput:\r\n- \"check - redundant conversions\" ... list per ontology of redundant conversions",
  "key": "9200",
  "name": "check - redundant conversions",
  "file": "9200 check - redundant conversions.js",
  "loadedResults": [
   "check - redundant conversions",
   "unit"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - redundant conversions"
  ]
 },
 {
  "desc": "Create HTML output for overlap in mapped units\r\n\noutput:\r\n- 'statistic - unit overlap noPrefix' ... table for unit overlap for unprefixed units\r\n- 'statistic - unit overlap total' ... table for unit overlap for all units",
  "key": "9270",
  "name": "statistic - unit overlap",
  "file": "9270 statistic - unit overlap.js",
  "loadedResults": [
   "statistic - individuals per ontology after mapping",
   "statistic - unit overlap - overlap total",
   "statistic - prefixed units after mapping",
   "statistic - unit overlap - overlap noPrefix"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "statistic - unit overlap + ' total'",
   "statistic - unit overlap + ' noPrefix'"
  ]
 },
 {
  "desc": "Create HTML output for unit per dimension\r\n\noutput:\r\n- \"check - unit per dimension after mapping\" ... list per dimension Synset of linked units",
  "key": "9280",
  "name": "check - unit per dimension after mapping",
  "file": "9280 check - unit per dimension after mapping.js",
  "loadedResults": [
   "mapDimension",
   "mapUnit",
   "mapDimension"
  ],
  "loadedPredefined": [],
  "loadedData": [
   "dimensionUnit"
  ],
  "exportResult": [],
  "exportHTML": [
   "check - unit per dimension after mapping"
  ]
 },
 {
  "desc": "Create HTML output for mismatches in conversions\r\n\noutput:\r\n- \"check - conversion contradictions\" ... list of conversions with different factors/offsets by different ontologies\r\n- \"check - conversion contradictions rounded\" ... list of conversions with different factors/offsets by different ontologies after taking rounding into account",
  "key": "9350",
  "name": "check - conversion contradictions",
  "file": "9350 check - conversion contradictions.js",
  "loadedResults": [
   "mapUnit",
   "check - conversion contradictions",
   "check - conversion contradictions rounded"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "filename"
  ]
 },
 {
  "desc": "Create HTML output for mismatches in dimension vectors\r\n\noutput:\r\n- \"check - dimensionVector\" ... list of dimensions with mismatches in their dimension vector",
  "key": "9400",
  "name": "check - dimensionVector",
  "file": "9400 check - dimensionVector.js",
  "loadedResults": [
   "check - dimensionVector",
   "dimension"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - dimensionVector"
  ]
 },
 {
  "desc": "Create HTML output for cross validate unit mapping and dimension mapping\r\nusing the dimensionUnit association\r\n\noutput:\r\n- \"check - dimension per unit after mapping\" ... list of instances, where a unit SynSet is associated with more than one dimension SynSet",
  "key": "9500",
  "name": "check - dimension per unit after mapping",
  "file": "9500 check - dimension per unit after mapping.js",
  "loadedResults": [
   "check - dimension per unit after mapping"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - dimension per unit after mapping"
  ]
 },
 {
  "desc": "Create HTML output for possibly imprecise units\r\n\nexample: gallon vs gallon US vs gallon UK\r\n\noutput:\r\n- \"check - vague designation\" ... list of units with possibly imprecise individuals",
  "key": "9550",
  "name": "check - vague designation",
  "file": "9550 check - vague designation.js",
  "loadedResults": [
   "check - vague designation"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - vague designation"
  ]
 },
 {
  "desc": "Create HTML output for mismatches in prefix factors\r\n\noutput:\r\n- \"check - prefix factors\" ... list of prefix SynSets with mismatches in factor",
  "key": "9600",
  "name": "check - prefix factors",
  "file": "9600 check - prefix factors.js",
  "loadedResults": [
   "check - prefix factors"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - prefix factors"
  ]
 },
 {
  "desc": "Create HTML output for used exotic characters\r\n\nexample: using \"no-break space\" (#160) instead of plain spaces\r\n\noutput:\r\n- \"check - exotic characters\" ... list per character of labels using exotic characters",
  "key": "9650",
  "name": "check - exotic characters",
  "file": "9650 check - exotic characters.js",
  "loadedResults": [
   "check - exotic characters"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - exotic characters"
  ]
 },
 {
  "desc": "Create HTML output for used keywords like \"per\" or \"reciprocal\"\r\n\noutput:\r\n- \"check - keyword usage\" ... list per ontology of used keywords including the respective amount\r\n- \"check - keyword usage details\" ... list per ontology of used keywords including the respective units",
  "key": "9670",
  "name": "check - keyword usage",
  "file": "9670 check - keyword usage.js",
  "loadedResults": [
   "check - keyword usage"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - keyword usage",
   "check - keyword usage + ' details'"
  ]
 },
 {
  "desc": "Create HTML output for units with multiple labels\r\n\noutput:\r\n- \"check - multiple labels\" ... list per ontology and type of objects with more than one label",
  "key": "9700",
  "name": "check - multiple labels",
  "file": "9700 check - multiple labels.js",
  "loadedResults": [
   "check - multiple labels"
  ],
  "loadedPredefined": [],
  "loadedData": [],
  "exportResult": [],
  "exportHTML": [
   "check - multiple labels"
  ]
 }
]